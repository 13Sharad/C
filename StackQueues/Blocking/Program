#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define QUEUE_CAPACITY 5  // Maximum size of the Blocking Queue

typedef struct {
    int front, rear, size;
    int capacity;
    int* array;
    pthread_mutex_t mutex;
    pthread_cond_t not_empty;
    pthread_cond_t not_full;
} BlockingQueue;

// Function to create a Blocking Queue
BlockingQueue* createQueue(int capacity) {
    BlockingQueue* queue = (BlockingQueue*)malloc(sizeof(BlockingQueue));
    queue->capacity = capacity;
    queue->front = queue->size = 0;
    queue->rear = capacity - 1;
    queue->array = (int*)malloc(queue->capacity * sizeof(int));
    pthread_mutex_init(&queue->mutex, NULL);
    pthread_cond_init(&queue->not_empty, NULL);
    pthread_cond_init(&queue->not_full, NULL);
    return queue;
}

// Check if the queue is full
int isFull(BlockingQueue* queue) {
    return (queue->size == queue->capacity);
}

// Check if the queue is empty
int isEmpty(BlockingQueue* queue) {
    return (queue->size == 0);
}

// Add an item to the queue (blocking if full)
void enqueue(BlockingQueue* queue, int item) {
    pthread_mutex_lock(&queue->mutex);
    while (isFull(queue)) {
        pthread_cond_wait(&queue->not_full, &queue->mutex);
    }

    queue->rear = (queue->rear + 1) % queue->capacity;
    queue->array[queue->rear] = item;
    queue->size++;
    printf("Enqueued %d\n", item);

    pthread_cond_signal(&queue->not_empty);
    pthread_mutex_unlock(&queue->mutex);
}

// Remove an item from the front of the queue (blocking if empty)
int dequeue(BlockingQueue* queue) {
    pthread_mutex_lock(&queue->mutex);
    while (isEmpty(queue)) {
        pthread_cond_wait(&queue->not_empty, &queue->mutex);
    }

    int item = queue->array[queue->front];
    queue->front = (queue->front + 1) % queue->capacity;
    queue->size--;
    printf("Dequeued %d\n", item);

    pthread_cond_signal(&queue->not_full);
    pthread_mutex_unlock(&queue->mutex);
    return item;
}

// Function to destroy the queue and free resources
void destroyQueue(BlockingQueue* queue) {
    free(queue->array);
    pthread_mutex_destroy(&queue->mutex);
    pthread_cond_destroy(&queue->not_empty);
    pthread_cond_destroy(&queue->not_full);
    free(queue);
}

// Sample producer function
void* producer(void* arg) {
    BlockingQueue* queue = (BlockingQueue*)arg;
    for (int i = 1; i <= 10; i++) {
        enqueue(queue, i);
        sleep(1);  // Simulating production time
    }
    return NULL;
}

// Sample consumer function
void* consumer(void* arg) {
    BlockingQueue* queue = (BlockingQueue*)arg;
    for (int i = 1; i <= 10; i++) {
        dequeue(queue);
        sleep(2);  // Simulating consumption time
    }
    return NULL;
}

// Main function to demonstrate Blocking Queue
int main() {
    BlockingQueue* queue = createQueue(QUEUE_CAPACITY);

    pthread_t producer_thread, consumer_thread;
    pthread_create(&producer_thread, NULL, producer, queue);
    pthread_create(&consumer_thread, NULL, consumer, queue);

    pthread_join(producer_thread, NULL);
    pthread_join(consumer_thread, NULL);

    destroyQueue(queue);
    return 0;
}
